{"version":3,"sources":["components/Menu.jsx","layout/Layout.jsx","pages/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Menu","Container","className","to","Layout","children","Home","useMetaMask","status","connect","account","chainId","transferNFT","ethereum","a","document","getElementById","innerHTML","contractAddress","tokenId","value","recipientAddress","console","log","provider","ethers","providers","Web3Provider","window","getSigner","signer","abi","Contract","transferFrom","then","result","hash","unwrapWETH","updateBaseURI","Button","variant","onClick","Form","onSubmit","e","preventDefault","Label","Control","id","type","placeholder","parseInt","App","path","element","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d103d11f.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport { Nav, Container } from \"react-bootstrap\";\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <Container>\r\n      <header className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 mb-4 border-bottom\">\r\n        <Link\r\n          to=\"/\"\r\n          className=\"d-flex align-items-center col-md-3 mb-2 mb-md-0 text-dark text-decoration-none\"\r\n        >\r\n          <p className=\"upText\" >Transfer Creative Coin for Authentication</p>\r\n        </Link>\r\n      </header>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","// components\r\nimport Menu from \"../components/Menu\";\r\nimport Footer from \"../components/Footer.jsx\";\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      <Menu />\r\n      <main>{children}</main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import Header from '../components/Header'\r\nimport Meta from '../components/Meta'\r\nimport { Container } from 'react-bootstrap'\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { useMetaMask } from \"metamask-react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst Home = () => {\r\n  const { status, connect, account, chainId, ethereum } = useMetaMask();\r\n\r\n  let transferNFT = async function() {\r\n    document.getElementById(\"txHash\").innerHTML = \"\";\r\n    let contractAddress = \"0x64aa2ad7589182652e5b9a801eef30d41cd1fcc8\";\r\n    let tokenId = document.getElementById(\"inputTokenId\").value;\r\n    let recipientAddress = \"0x9DCb796a016135Dd8bbF08D462c4F5b9B044a21D\";\r\n    console.log(contractAddress, tokenId, recipientAddress);\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    const abi = [{\r\n      \"inputs\": [\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"from\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"address\",\r\n          \"name\": \"to\",\r\n          \"type\": \"address\"\r\n        },\r\n        {\r\n          \"internalType\": \"uint256\",\r\n          \"name\": \"tokenId\",\r\n          \"type\": \"uint256\"\r\n        }\r\n      ],\r\n      \"name\": \"transferFrom\",\r\n      \"outputs\": [],\r\n      \"stateMutability\": \"nonpayable\",\r\n      \"type\": \"function\"\r\n    }];\r\n    const contract = new ethers.Contract(contractAddress, abi, signer);\r\n    contract.transferFrom(account, recipientAddress, tokenId).then((result) => {\r\n      console.log(result);\r\n      document.getElementById(\"txHash\").innerHTML = \"Transaction Hash: \" + result.hash;\r\n    });\r\n  }\r\n\r\n  let unwrapWETH = async function() {\r\n    // document.getElementById(\"txHashUnwrapWETH\").innerHTML = \"\";\r\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // const signer = await provider.getSigner();\r\n    // const abi = [{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}];\r\n    // const contractAddress = \"0x223D7fceEF24258155a3341C770E8D1ca6B938fE\";\r\n    // const contract = new ethers.Contract(contractAddress, abi, signer);\r\n    // const balance = await contract.balanceOf(account);\r\n    // console.log(balance);\r\n    // contract.withdraw(balance).then((result) => {\r\n    //   console.log(result);\r\n    //   document.getElementById(\"txHashUnwrapWETH\").innerHTML = \"<br />Transaction Hash: \" + result.hash;\r\n    // });\r\n  }\r\n\r\n  let updateBaseURI = async function() {\r\n    // document.getElementById(\"txHashUpdateBaseURI\").innerHTML = \"\";\r\n    // let contractAddress = document.getElementById(\"inputContractAddress2\").value;\r\n    // let baseURI = document.getElementById(\"inputBaseURI\").value;\r\n    // const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // const signer = await provider.getSigner();\r\n    // const abi = [{\r\n    //   \"inputs\": [\r\n    //     {\r\n    //       \"internalType\": \"string\",\r\n    //       \"name\": \"baseURI_\",\r\n    //       \"type\": \"string\"\r\n    //     }\r\n    //   ],\r\n    //   \"name\": \"setBaseURI\",\r\n    //   \"outputs\": [],\r\n    //   \"stateMutability\": \"nonpayable\",\r\n    //   \"type\": \"function\"\r\n    // }];\r\n    // const contract = new ethers.Contract(contractAddress, abi, signer);\r\n    // contract.setBaseURI(baseURI).then((result) => {\r\n    //   console.log(result);\r\n    //   document.getElementById(\"txHashUpdateBaseURI\").innerHTML = \"Transaction Hash: \" + result.hash;\r\n    // });\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <div className='starter-template text-center mt-5'>\r\n        {status === \"initializing\" ?\r\n          <p>Synchronisation with MetaMask ongoing...</p>\r\n        : status === \"unavailable\" ?\r\n          <p>MetaMask not available :(</p>\r\n        : status === \"notConnected\" ?\r\n          <div><Button variant=\"primary\" onClick={connect}>Connect to MetaMask</Button></div>\r\n        : status === \"connecting\" ?\r\n          <p>Connecting...</p>\r\n        : status === \"connected\" ?\r\n          <div>\r\n            <p>Connected account: {account}</p>\r\n            <p className=\"chainid\" >Make sure you're using correct network</p>\r\n            <br /><br />\r\n            <Form onSubmit={(e) => {e.preventDefault();}}>\r\n              <Form.Label><h4>Transfer Creative Coin</h4></Form.Label>\r\n              {/* <Form.Control id=\"inputContractAddress\" type=\"text\" placeholder=\"ERC721 Contract Address\" /><br /> */}\r\n              <Form.Control id=\"inputTokenId\" type=\"text\" placeholder=\"Token ID\" /><br />\r\n              {/* <Form.Control id=\"inputRecipientAddress\" type=\"text\" placeholder=\"Recipient Address\" /><br /> */}\r\n              <Button variant=\"primary w-100 btn-lg\" type=\"submit\" onClick={transferNFT}>Transfer</Button>\r\n            </Form>\r\n            <br />\r\n            <p id=\"txHash\"></p>\r\n\r\n            {parseInt(chainId) === 280 ? <>\r\n              <br /><br />\r\n              <h4>Unwrap WETH</h4>\r\n              <Button variant=\"primary\" onClick={unwrapWETH}>Unwrap WETH</Button>\r\n              <p id=\"txHashUnwrapWETH\"></p>\r\n\r\n              <br /><br /><br />\r\n              <Form onSubmit={(e) => {e.preventDefault();}}>\r\n                <Form.Label><h4>Update Collection BaseURI</h4></Form.Label>\r\n                <Form.Control id=\"inputContractAddress2\" type=\"text\" placeholder=\"ERC721 Contract Address\" /><br />\r\n                <Form.Control id=\"inputBaseURI\" type=\"text\" placeholder=\"BaseURI\" /><br />\r\n                <Button variant=\"primary w-100 btn-lg\" type=\"submit\" onClick={updateBaseURI}>Update</Button>\r\n              </Form>\r\n              <br />\r\n              <p id=\"txHashUpdateBaseURI\"></p>\r\n            </> : ''}\r\n          </div>\r\n        :\r\n          <p></p>\r\n        }\r\n        <br /><br />\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { Container } from \"react-bootstrap\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\n\r\n// Layout\r\nimport Layout from \"./layout/Layout\";\r\n\r\n// pages\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport NotFound from \"./pages/NotFound\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Layout>\r\n      <Container>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Home />} exact />\r\n        </Routes>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nimport { MetaMaskProvider } from \"metamask-react\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MetaMaskProvider>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </MetaMaskProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}